<Application x:Class="SierraHOTAS.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="clr-namespace:SierraHOTAS.Controls"
             xmlns:dataTemplates="clr-namespace:SierraHOTAS.ViewModels.DataTemplates"
             StartupUri="MainWindow.xaml">

    <Application.Resources>

        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#323232" />

        <SolidColorBrush x:Key="TextHeaderBrush" Color="#7ac1ff" />
        <SolidColorBrush x:Key="TextBrush" Color="Azure" />

        <SolidColorBrush x:Key="DataGridHighlightBrush" Color="LawnGreen" />

        <SolidColorBrush x:Key="HoverBrush" Color="#313f47" />
        <SolidColorBrush x:Key="HoverBorderBrush" Color="#2a7aa1" />
        <SolidColorBrush x:Key="SelectedBrush" Color="#2f4c5a" />
        <SolidColorBrush x:Key="SelectedBorderBrush" Color="#26a0da" />

        <SolidColorBrush x:Key="GroupBorderBrush" Color="#708090" />
        <SolidColorBrush x:Key="NormalBorderBrush" Color="Azure" />
        <SolidColorBrush x:Key="RowBrush" Color="Transparent" />
        <SolidColorBrush x:Key="RowAlternateBrush" Color="#424242" />

        <SolidColorBrush x:Key="AxisForwardBrush" Color="Gold" />
        <SolidColorBrush x:Key="AxisReverseBrush" Color="#80e5ff" />

        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888888" />
        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#313f47" />
        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#313f47" />

        <controls:AxisValueToPercentageConverter x:Key="AxisValueToPercentageConverter"/>
        <controls:FileNameConverter x:Key="FileNameConverter"/>
        <controls:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

        <BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter" />

        <Style TargetType="TextBlock" x:Key="ModeActivationTextBlock">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="15"/>
        </Style>

        <Style TargetType="TextBox" x:Key="ModeActivationTextBox">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="15"/>
        </Style>

        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
        <Style TargetType="Button" x:Key="MenuButton">
            <Setter Property="Margin" Value="2,0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="QuickProfileButton">
            <!--<Setter Property="Margin" Value="15,0"/>-->
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="ClearQuickProfileButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="17"/>
            <Setter Property="Width" Value="17"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="MacroButton">
            <Setter Property="Background" Value="WhiteSmoke"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="{StaticResource HoverBorderBrush}"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Image" x:Key="MacroButtonImage">
            <Setter Property="Height" Value="21"/>
            <Setter Property="Width" Value="21"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.1" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Height" Value="24"/>
                    <Setter Property="Width" Value="24"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Button" x:Key="RefreshButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="17"/>
            <Setter Property="Width" Value="17"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="AddButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="17"/>
            <Setter Property="Width" Value="17"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="ClearListButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="17"/>
            <Setter Property="Width" Value="17"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style TargetType="Button" x:Key="SoundButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Width" Value="24"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>


        <!-- style for focusless listbox -->
        <Style x:Key="ListBoxItemStyleNoHighlighting" TargetType="ListBoxItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="ButtonMapTemplate">
            <WrapPanel>
                <controls:ButtonMap Margin="1"/>
            </WrapPanel>
        </DataTemplate>

        <DataTemplate x:Key="LinearAxisMapTemplate">
            <WrapPanel>
                <controls:LinearAxisMap Margin="1"/>
            </WrapPanel>
        </DataTemplate>

        <DataTemplate x:Key="RadialAxisMapTemplate">
            <WrapPanel>
                <controls:RadialAxisMap Margin="1"/>
            </WrapPanel>
        </DataTemplate>

        <dataTemplates:MapDataTemplateSelector x:Key="MapDataTemplateSelector" 
                                   LinearDataTemplate="{StaticResource LinearAxisMapTemplate}"
                                   ButtonDataTemplate="{StaticResource ButtonMapTemplate}"
                                   RadialDataTemplate="{StaticResource RadialAxisMapTemplate}"/>

        <Style TargetType="{x:Type ListView}" x:Key="CustomListView">
            <Setter Property="BorderBrush" Value="{StaticResource GroupBorderBrush}" />
            <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
            <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
        </Style>

        <!-- ListView color control for rows, highlight, and selected -->
        <Style TargetType="{x:Type ListViewItem}" x:Key="CustomButtonListViewItem">
            <Style.Triggers>
                <!-- alternate row color -->
                <Trigger Property="ItemsControl.AlternationIndex"  Value="0">
                    <Setter Property="Background" Value="{StaticResource RowBrush}" />
                </Trigger>
                <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
                    <Setter Property="Background" Value="{StaticResource RowAlternateBrush}" />
                </Trigger>

                <!-- highlight color (need ControlTemplate also) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource HoverBorderBrush}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Background" Value="{StaticResource HoverBrush}"/>
                    <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                </Trigger>

                <!-- highlighting the selected row. used for jumping to the button that is pressed on the joystick -->
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="{StaticResource SelectedBorderBrush}"/>
                    <Setter Property="Background" Value="{StaticResource SelectedBrush}"/>
                    <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                </Trigger>
            </Style.Triggers>

            <!-- highlight color (needs mouseover trigger)-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Grid>
                            <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <GridViewRowPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                            </Border>

                            <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{StaticResource MapDataTemplateSelector}"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
            <Setter Property="Height" Value="15"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" 
                                       Width="13" 
                                       Height="13" 
                                       CornerRadius="0" 
                                       Background="Transparent"
                                       BorderThickness="1"
                                       BorderBrush="{StaticResource NormalBorderBrush}">
                                    <Path 
                                        Width="7" Height="7" 
                                        x:Name="CheckMark"
                                        SnapsToDevicePixels="False" 
                                        Stroke="{StaticResource TextHeaderBrush}"
                                        StrokeThickness="2"
                                        Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="22" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2"
                          Background="{StaticResource WindowBackgroundBrush}"
                          BorderBrush="{StaticResource NormalBorderBrush}"
                          BorderThickness="1" />
                <Border 
                              Grid.Column="0"
                              Margin="1" 
                              BorderBrush="{StaticResource NormalBorderBrush}"
                              BorderThickness="0,0,1,0" />
                <Path 
                              x:Name="Arrow"
                              Grid.Column="1"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Fill="{StaticResource SelectedBorderBrush}"
                              Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
                <!-- solid triangle: Data="M 0 0 L 4 4 L 8 0 Z"-->

            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectedBrush}" />
                    <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource SelectedBorderBrush}" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectedBrush}" />
                    <Setter TargetName="Arrow" Property="Fill" Value="Azure" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                    <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>

        <Style x:Key="{x:Type ComboBox}" TargetType="ComboBox">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton 
                                 Name="ToggleButton" 
                                 Template="{StaticResource ComboBoxToggleButton}" 
                                 Grid.Column="2" 
                                 Focusable="false"
                                 IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                 ClickMode="Press">
                            </ToggleButton>
                            <ContentPresenter
                                Name="ContentSite"
                                Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" 
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" 
                                Margin="3,3,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                                     Style="{x:Null}" 
                                     Template="{StaticResource ComboBoxTextBox}" 
                                     HorizontalAlignment="Left" 
                                     VerticalAlignment="Center" 
                                     SelectionBrush="{StaticResource SelectedBorderBrush}"
                                     CaretBrush="{StaticResource TextBrush}"
                                     Margin="3,3,23,3"
                                     Focusable="True" 
                                     Background="Transparent"
                                     Foreground="{TemplateBinding Foreground}"
                                     FontSize="14"
                                     Visibility="Hidden"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                                <Grid 
                                  Name="DropDown"
                                  Background="Azure"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                    x:Name="DropDownBorder"
                                    Background="{StaticResource SelectedBrush}"
                                    BorderThickness="1"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="24"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable" Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TabItem" x:Key="CustomTabItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Name="Border" Background="Transparent"
                                BorderBrush="Azure" BorderThickness="1">
                                <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              ContentSource="Header" Margin="10,2,1,2"
                                              RecognizesAccessKey="True">
                                </ContentPresenter>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="ColumnHeaderStyle" Value="{DynamicResource DataGridColumnHeaderStyle}"/>
        </Style>

        <Style x:Key="DataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="Height" Value="24"/>
            <Setter Property="Background" Value="{StaticResource HoverBrush}" />
            <Setter Property="Foreground" Value="{StaticResource TextHeaderBrush}"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
        
        <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Style.Triggers>
                <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                    <Setter Property="Background" Value="{StaticResource RowBrush}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource RowBrush}" />
                </Trigger>
                <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                    <Setter Property="Background" Value="{StaticResource RowAlternateBrush}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource RowAlternateBrush}" />
                </Trigger>

                <!-- highlight color (need ControlTemplate also) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource HoverBorderBrush}"/>
                    <Setter Property="Background" Value="{StaticResource HoverBrush}"/>
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource SelectedBorderBrush}"/>
                    <Setter Property="Background" Value="{StaticResource SelectedBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Application.Resources>

</Application>
